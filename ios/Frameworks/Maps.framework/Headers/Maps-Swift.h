#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Maps/Maps.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Maps",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Handles the app analytics
SWIFT_CLASS("_TtC4Maps9Analytics")
@interface Analytics : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

/// Base View Controller
SWIFT_CLASS("_TtC4Maps18BaseViewController")
@interface BaseViewController : ISHPullUpViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class CTLLevel;
@class UIImage;
@class CTLLocation;
@class CTLCategory;

/// POI Class
SWIFT_CLASS("_TtC4Maps6CTLPOI")
@interface CTLPOI : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Path identifier
@property (nonatomic, copy) NSString * _Nullable pathId;
/// Type
@property (nonatomic, copy) NSString * _Nullable type;
/// Level
@property (nonatomic, strong) CTLLevel * _Nullable level;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Image
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// Logo
@property (nonatomic, strong) UIImage * _Nullable logo;
/// Location
@property (nonatomic, strong) CTLLocation * _Nullable location;
/// Phone
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull phone;
/// Schedule
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull schedule;
/// Address dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull address;
/// Array of Categories
@property (nonatomic, copy) NSArray<CTLCategory *> * _Nonnull categories;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents amenity POI
SWIFT_CLASS("_TtC4Maps10CTLAmenity")
@interface CTLAmenity : CTLPOI
@end


/// Category Class
SWIFT_CLASS("_TtC4Maps11CTLCategory")
@interface CTLCategory : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Short name
@property (nonatomic, copy) NSString * _Nullable code;
/// Master code can be used to group the categories
@property (nonatomic, copy) NSString * _Nullable master;
/// Parent category
@property (nonatomic, strong) CTLCategory * _Nullable parent;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Category image
@property (nonatomic, strong) UIImage * _Nullable image;
/// Array of POIs associated with this category
@property (nonatomic, copy) NSArray<CTLPOI *> * _Nullable pois;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// Category icon image
@property (nonatomic, strong) UIImage * _Nullable icon;
- (BOOL)equals:(CTLCategory * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CTLSection;

/// Level Class
SWIFT_CLASS("_TtC4Maps8CTLLevel")
@interface CTLLevel : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable code;
/// Floor level
@property (nonatomic) NSInteger index;
/// Full name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Short name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull text;
/// Section associated with this level
@property (nonatomic, strong) CTLSection * _Nullable section;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)equals:(CTLLevel * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class CLHeading;
@class CLLocation;

/// Location Class
SWIFT_CLASS("_TtC4Maps11CTLLocation")
@interface CTLLocation : NSObject
/// Coodinate in latitude and longitude
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// Heading
@property (nonatomic, strong) CLHeading * _Nullable heading;
/// Horizontal Accuracy, radius in meters
@property (nonatomic) CLLocationAccuracy horizontalAccuracy;
/// Floor level
@property (nonatomic) NSInteger level;
/// Vertical Accuracy, altitude in meters
@property (nonatomic) CLLocationAccuracy verticalAccuracy;
/// \param location CLLocation
///
/// \param newHeading CLHeading (optional)
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location withHeading:(CLHeading * _Nullable)newHeading OBJC_DESIGNATED_INITIALIZER;
- (double)distanceFromDestination:(CTLLocation * _Nonnull)destination SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// CTLLocationManager provides the location updates
SWIFT_CLASS("_TtC4Maps18CTLLocationManager")
@interface CTLLocationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Methods you use to receive the location manager events
SWIFT_PROTOCOL("_TtP4Maps26CTLLocationManagerDelegate_")
@protocol CTLLocationManagerDelegate
/// Called when the authorization status is updated
- (void)didChangeAuthorizationWithStatus:(CLAuthorizationStatus)status;
/// Called when there’s a location update
- (void)didUpdateWithLocation:(CTLLocation * _Nonnull)location;
@end


/// Represents occupant POI
SWIFT_CLASS("_TtC4Maps11CTLOccupant")
@interface CTLOccupant : CTLPOI
@end



/// Path Class
SWIFT_CLASS("_TtC4Maps7CTLPath")
@interface CTLPath : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Path Request
SWIFT_CLASS("_TtC4Maps14CTLPathRequest")
@interface CTLPathRequest : NSObject
/// \param origin CTLPOI or CTLLocation
///
/// \param destination CTLPOI or CTLLocation
///
/// \param disabled path option for a pwd user
///
- (nonnull instancetype)initWithOrigin:(id _Nonnull)origin destination:(id _Nonnull)destination disabled:(BOOL)disabled OBJC_DESIGNATED_INITIALIZER;
/// \param path CTLPath - it must contain an origin and destination
///
/// \param disabled path option for a pwd user
///
- (nonnull instancetype)initWithPath:(CTLPath * _Nonnull)path disabled:(BOOL)disabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Section Class
SWIFT_CLASS("_TtC4Maps10CTLSection")
@interface CTLSection : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Short name
@property (nonatomic, copy) NSString * _Nullable code;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Bounds dictionary using CTLSection.NORTH, CTLSection.SOUTH, CTLSection.EAST, and CTLSection.WEST as keys
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull bounds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)equals:(CTLSection * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles all the POI data
SWIFT_CLASS("_TtC4Maps14ContentManager")
@interface ContentManager : NSObject
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContentManager * _Nonnull shared;)
+ (ContentManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Fetch all amenities
///
/// returns:
/// Array of CTLAmenity
- (NSArray<CTLAmenity *> * _Nonnull)fetchAmenities SWIFT_WARN_UNUSED_RESULT;
/// Fetch all categories
///
/// returns:
/// Array of CTLCategory
- (NSArray<CTLCategory *> * _Nonnull)fetchCategories SWIFT_WARN_UNUSED_RESULT;
/// Fetch category by id
/// \param id category id
///
///
/// returns:
/// CTLCategory (optional)
- (CTLCategory * _Nullable)fetchCategoryWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch all levels
///
/// returns:
/// Array of CTLLevel
- (NSArray<CTLLevel *> * _Nonnull)fetchLevels SWIFT_WARN_UNUSED_RESULT;
/// Fetch level by id
/// \param id level id
///
///
/// returns:
/// CTLLevel (optional)
- (CTLLevel * _Nullable)fetchLevelWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch level by index and section code
/// \param index level index
///
/// \param section section code
///
///
/// returns:
/// CTLLevel (optional)
- (CTLLevel * _Nullable)fetchLevelWithIndex:(NSInteger)index section:(NSString * _Nonnull)section SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby amenities with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyAmenitiesWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby pois with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyPOIsWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby occupants with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyOccupantsWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch all occupants
///
/// returns:
/// Array of CTLOccupant
- (NSArray<CTLOccupant *> * _Nonnull)fetchOccupants SWIFT_WARN_UNUSED_RESULT;
/// Fetch all pois
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchPOIs SWIFT_WARN_UNUSED_RESULT;
/// Fetch poi by id
/// \param id poi id
///
///
/// returns:
/// CTLPOI (optional)
- (CTLPOI * _Nullable)fetchPOIWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch poi by path id
/// \param pathId path id
///
///
/// returns:
/// CTLPOI (optional)
- (CTLPOI * _Nullable)fetchPOIWithPathId:(NSString * _Nonnull)pathId SWIFT_WARN_UNUSED_RESULT;
/// Fetch all sections
///
/// returns:
/// Array of CTLSection
- (NSArray<CTLSection *> * _Nonnull)fetchSections SWIFT_WARN_UNUSED_RESULT;
/// Fetch section by id
/// \param id section id
///
///
/// returns:
/// CTLSection (optional)
- (CTLSection * _Nullable)fetchSectionWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Map Constants
SWIFT_CLASS("_TtC4Maps12MapConstants")
@interface MapConstants : NSObject
/// Post this notification to hide the POI detail view
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIDE_PREVIEW_NOTIFICATION;)
+ (NSString * _Nonnull)HIDE_PREVIEW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to show the minimalist POI detail view by including the CTLPOI id
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PREVIEW_NOTIFICATION;)
+ (NSString * _Nonnull)SHOW_PREVIEW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to change the maps floor level by including a CTLLevel object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_FLOOR_NOTIFICATION;)
+ (NSString * _Nonnull)CHANGE_FLOOR_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Map setup completed notification
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_ORIGIN_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_ORIGIN_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_DESTINATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_DESTINATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI id in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_BY_ID_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_BY_ID_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_UN_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_UN_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to zoom out, focus, and zoom in on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_ZOOM_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_ZOOM_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to end the navigation and remove the path
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_END_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_END_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to end the navigation and remove the path
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_END_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_END_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Call back when the auto follow button has been tapped
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_ENABLE_AUTO_FOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_ENABLE_AUTO_FOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the selected POI
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_SELECT_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_SELECT_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the deselected POI
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_DESELECT_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_DESELECT_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to know when to start the AR
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_AR_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_AR_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get notified when the navigate button is tapped
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_DIRECTION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_DIRECTION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get notified when the navigation started
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_DESTINATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_DESTINATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the level updates
///
/// returns:
/// <code>CTLLevel</code> in the notification.object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_LEVEL_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_LEVEL_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_PATH_DATA_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_PATH_DATA_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_PATHS_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_PATHS_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the section updates
/// <ul>
///   <li>
///     Returns CTLSection in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_SECTION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_SECTION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the user location updates
/// <ul>
///   <li>
///     Returns CTLLocation in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_USER_LOCATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_USER_LOCATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to start the navigation
/// <ul>
///   <li>
///     Parameters: [ “origin” : <CTLPOI>, “destination” : <CTLPOI> ]
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_WILL_START_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_WILL_START_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DISABLE_AUTOFOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DISABLE_AUTOFOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_ENABLE_AUTOFOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_ENABLE_AUTOFOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_VENUE_CHANGED_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_VENUE_CHANGED_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Amenities setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AMENITIES_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)AMENITIES_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Levels and Sections setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LEVELS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)LEVELS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Occupants setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OCCUPANTS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)OCCUPANTS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// POIs additional setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull POIS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)POIS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MapManagerDelegate;
@class SDKConfig;

/// Handles all the information related to the map
SWIFT_CLASS("_TtC4Maps10MapManager")
@interface MapManager : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MapManager * _Nonnull shared;)
+ (MapManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <MapManagerDelegate> _Nullable delegate;
+ (void)setArButtonVisible:(BOOL)visible;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the map data for the given configuration
/// \param config Configuration
///
- (void)setupWithConfig:(SDKConfig * _Nonnull)config;
@end


/// The <code>MapManagerDelegate</code> protocol defines a set of methods that respond to the setup callbacks.
SWIFT_PROTOCOL("_TtP4Maps18MapManagerDelegate_")
@protocol MapManagerDelegate
/// Successful map setup callback
- (void)didFinishMapSetup;
/// Failed map setup callback
- (void)didFailMapSetupWithError:(NSString * _Nullable)error;
/// Successful amenities setup callback
- (void)didFinishAmenitiesSetup;
/// Failed amenities setup callback
- (void)didFailAmenitiesSetupWithError:(NSString * _Nullable)error;
/// Successful occupants setup callback
- (void)didFinishOccupantsSetup;
/// Failed occupants setup callback
- (void)didFailOccupantsSetupWithError:(NSString * _Nullable)error;
/// Successful paths setup callback
- (void)didFinishPathsSetup;
/// Failed paths setup callback
- (void)didFailPathsSetupWithError:(NSString * _Nullable)error;
/// Successful levels setup callback
- (void)didFinishLevelsSetup;
/// Failed levels setup callback
- (void)didFailLevelsSetupWithError:(NSString * _Nullable)error;
@optional
- (void)didFinishSetupWithError:(NSString * _Nullable)withError;
@end

@protocol MapsDelegate;

/// Parent controller of the whole Map component
SWIFT_CLASS("_TtC4Maps4Maps")
@interface Maps : BaseViewController
@property (nonatomic, weak) id <MapsDelegate> _Nullable delegate;
- (void)viewDidLoad;
///
- (void)viewWillDisappear:(BOOL)animated;
- (void)changeFloorWithLevel:(CTLLevel * _Nonnull)level;
- (void)focusWithPoi:(CTLPOI * _Nonnull)poi;
- (void)focusWithPoiID:(NSString * _Nonnull)poiID;
- (void)unFocusPOI;
- (void)startNavigationWithRequest:(CTLPathRequest * _Nonnull)request;
- (void)startNavigationWithStartPOI:(NSString * _Nonnull)startPOI endPOI:(NSString * _Nonnull)endPOI disablePath:(BOOL)disablePath;
- (void)startNavigationFromCurrentLocationWithDestinationPOI:(NSString * _Nonnull)destinationPOI disablePath:(BOOL)disablePath;
- (void)stopNavigation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>MapsDelegate</code> protocol defines a set of methods that respond to map actions.
SWIFT_PROTOCOL("_TtP4Maps12MapsDelegate_")
@protocol MapsDelegate
@optional
/// Callback triggered when the navigation stopped
- (void)didEndNavigation;
/// Callback after deselecting a POI on the map
- (void)didDeselectPOIWithPoi:(CTLPOI * _Nonnull)poi;
/// Callback after the map has been loaded
- (void)didFinishLoadingMap;
/// Callback after tapping a POI on the map
- (void)didSelectPOIWithPoi:(CTLPOI * _Nonnull)poi;
/// Callback triggered when the navigation started
- (void)didStartNavigationWithPath:(CTLPathRequest * _Nonnull)path;
/// Callback when the floor level changed
- (void)didUpdateLevelWithLevel:(CTLLevel * _Nonnull)level;
/// Callback when the section changed
- (void)didUpdateSectionWithSection:(CTLSection * _Nonnull)section;
/// Callback on touch up of the navigate button
- (void)willStartNavigationWithRequest:(CTLPathRequest * _Nonnull)request;
@end




/// Notification Constants
SWIFT_CLASS("_TtC4Maps21NotificationConstants")
@interface NotificationConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ServerCredential;

SWIFT_CLASS("_TtC4Maps9SDKConfig")
@interface SDKConfig : NSObject
- (nonnull instancetype)initWithBaseHostUrl:(NSString * _Nonnull)baseHostUrl venueCode:(NSString * _Nonnull)venueCode credential:(ServerCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4Maps16ServerCredential")
@interface ServerCredential : NSObject
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password clientId:(NSString * _Nonnull)clientId clientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIColor;

/// App Settings
SWIFT_CLASS("_TtC4Maps8Settings")
@interface Settings : NSObject
/// “en” for English
/// “zh_cn” for Simplified
/// “zh_tw” for Traditional
///
/// returns:
/// String
+ (NSString * _Nonnull)getLanguageCode SWIFT_WARN_UNUSED_RESULT;
/// Set the app’s main color
/// \param color color
///
+ (void)setAppThemeWithColor:(UIColor * _Nonnull)color;
/// Set the apps contrasting color
/// \param color color
///
+ (void)setAppContrastThemeWithColor:(UIColor * _Nonnull)color;
+ (void)setDefaultCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
/// Sets the font size multiplier
/// \param multiplier multiplier
///
+ (void)setFontSizeMultiplierWithMultiplier:(float)multiplier;
/// Sets the language code
/// “en” for English
/// “zh_cn” for Simplified
/// “zh_tw” for Traditional
/// \param code language code
///
+ (void)setLanguageWithCode:(NSString * _Nonnull)code;
/// Sets the map’s background color
/// \param color UIColor
///
+ (void)setMapBackgroundColorWithColor:(UIColor * _Nonnull)color;
/// POI details background color
/// \param color color
///
+ (void)setPreviewBackgroundColorWithColor:(UIColor * _Nonnull)color;
/// POI details text colors
/// \param color color
///
+ (void)setPreviewTextColorWithColor:(UIColor * _Nonnull)color;
/// Sets the user location indicator’s color
/// \param color UIColor (default value is blue)
///
+ (void)setUserLocationColorWithColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end














SWIFT_CLASS("_TtC4Maps12VenueManager")
@interface VenueManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Maps/Maps.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Maps",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Handles the app analytics
SWIFT_CLASS("_TtC4Maps9Analytics")
@interface Analytics : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

/// Base View Controller
SWIFT_CLASS("_TtC4Maps18BaseViewController")
@interface BaseViewController : ISHPullUpViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class CTLLevel;
@class UIImage;
@class CTLLocation;
@class CTLCategory;

/// POI Class
SWIFT_CLASS("_TtC4Maps6CTLPOI")
@interface CTLPOI : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Path identifier
@property (nonatomic, copy) NSString * _Nullable pathId;
/// Type
@property (nonatomic, copy) NSString * _Nullable type;
/// Level
@property (nonatomic, strong) CTLLevel * _Nullable level;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Image
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// Logo
@property (nonatomic, strong) UIImage * _Nullable logo;
/// Location
@property (nonatomic, strong) CTLLocation * _Nullable location;
/// Phone
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull phone;
/// Schedule
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull schedule;
/// Address dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull address;
/// Array of Categories
@property (nonatomic, copy) NSArray<CTLCategory *> * _Nonnull categories;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents amenity POI
SWIFT_CLASS("_TtC4Maps10CTLAmenity")
@interface CTLAmenity : CTLPOI
@end


/// Category Class
SWIFT_CLASS("_TtC4Maps11CTLCategory")
@interface CTLCategory : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Short name
@property (nonatomic, copy) NSString * _Nullable code;
/// Master code can be used to group the categories
@property (nonatomic, copy) NSString * _Nullable master;
/// Parent category
@property (nonatomic, strong) CTLCategory * _Nullable parent;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Category image
@property (nonatomic, strong) UIImage * _Nullable image;
/// Array of POIs associated with this category
@property (nonatomic, copy) NSArray<CTLPOI *> * _Nullable pois;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// Category icon image
@property (nonatomic, strong) UIImage * _Nullable icon;
- (BOOL)equals:(CTLCategory * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CTLSection;

/// Level Class
SWIFT_CLASS("_TtC4Maps8CTLLevel")
@interface CTLLevel : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable code;
/// Floor level
@property (nonatomic) NSInteger index;
/// Full name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Short name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull text;
/// Section associated with this level
@property (nonatomic, strong) CTLSection * _Nullable section;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)equals:(CTLLevel * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class CLHeading;
@class CLLocation;

/// Location Class
SWIFT_CLASS("_TtC4Maps11CTLLocation")
@interface CTLLocation : NSObject
/// Coodinate in latitude and longitude
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// Heading
@property (nonatomic, strong) CLHeading * _Nullable heading;
/// Horizontal Accuracy, radius in meters
@property (nonatomic) CLLocationAccuracy horizontalAccuracy;
/// Floor level
@property (nonatomic) NSInteger level;
/// Vertical Accuracy, altitude in meters
@property (nonatomic) CLLocationAccuracy verticalAccuracy;
/// \param location CLLocation
///
/// \param newHeading CLHeading (optional)
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location withHeading:(CLHeading * _Nullable)newHeading OBJC_DESIGNATED_INITIALIZER;
- (double)distanceFromDestination:(CTLLocation * _Nonnull)destination SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// CTLLocationManager provides the location updates
SWIFT_CLASS("_TtC4Maps18CTLLocationManager")
@interface CTLLocationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Methods you use to receive the location manager events
SWIFT_PROTOCOL("_TtP4Maps26CTLLocationManagerDelegate_")
@protocol CTLLocationManagerDelegate
/// Called when the authorization status is updated
- (void)didChangeAuthorizationWithStatus:(CLAuthorizationStatus)status;
/// Called when there’s a location update
- (void)didUpdateWithLocation:(CTLLocation * _Nonnull)location;
@end


/// Represents occupant POI
SWIFT_CLASS("_TtC4Maps11CTLOccupant")
@interface CTLOccupant : CTLPOI
@end



/// Path Class
SWIFT_CLASS("_TtC4Maps7CTLPath")
@interface CTLPath : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Path Request
SWIFT_CLASS("_TtC4Maps14CTLPathRequest")
@interface CTLPathRequest : NSObject
/// \param origin CTLPOI or CTLLocation
///
/// \param destination CTLPOI or CTLLocation
///
/// \param disabled path option for a pwd user
///
- (nonnull instancetype)initWithOrigin:(id _Nonnull)origin destination:(id _Nonnull)destination disabled:(BOOL)disabled OBJC_DESIGNATED_INITIALIZER;
/// \param path CTLPath - it must contain an origin and destination
///
/// \param disabled path option for a pwd user
///
- (nonnull instancetype)initWithPath:(CTLPath * _Nonnull)path disabled:(BOOL)disabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Section Class
SWIFT_CLASS("_TtC4Maps10CTLSection")
@interface CTLSection : NSObject
/// Unique identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Short name
@property (nonatomic, copy) NSString * _Nullable code;
/// Name dictionary using the language code (en, zh_cn, zh_tw) as key
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull name;
/// Bounds dictionary using CTLSection.NORTH, CTLSection.SOUTH, CTLSection.EAST, and CTLSection.WEST as keys
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull bounds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)equals:(CTLSection * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles all the POI data
SWIFT_CLASS("_TtC4Maps14ContentManager")
@interface ContentManager : NSObject
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContentManager * _Nonnull shared;)
+ (ContentManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Fetch all amenities
///
/// returns:
/// Array of CTLAmenity
- (NSArray<CTLAmenity *> * _Nonnull)fetchAmenities SWIFT_WARN_UNUSED_RESULT;
/// Fetch all categories
///
/// returns:
/// Array of CTLCategory
- (NSArray<CTLCategory *> * _Nonnull)fetchCategories SWIFT_WARN_UNUSED_RESULT;
/// Fetch category by id
/// \param id category id
///
///
/// returns:
/// CTLCategory (optional)
- (CTLCategory * _Nullable)fetchCategoryWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch all levels
///
/// returns:
/// Array of CTLLevel
- (NSArray<CTLLevel *> * _Nonnull)fetchLevels SWIFT_WARN_UNUSED_RESULT;
/// Fetch level by id
/// \param id level id
///
///
/// returns:
/// CTLLevel (optional)
- (CTLLevel * _Nullable)fetchLevelWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch level by index and section code
/// \param index level index
///
/// \param section section code
///
///
/// returns:
/// CTLLevel (optional)
- (CTLLevel * _Nullable)fetchLevelWithIndex:(NSInteger)index section:(NSString * _Nonnull)section SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby amenities with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyAmenitiesWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby pois with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyPOIsWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch nearby occupants with maximum radius CTL_PROXIMITY_DISTANCE
/// \param location CTLLocation
///
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchNearbyOccupantsWithLocation:(CTLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Fetch all occupants
///
/// returns:
/// Array of CTLOccupant
- (NSArray<CTLOccupant *> * _Nonnull)fetchOccupants SWIFT_WARN_UNUSED_RESULT;
/// Fetch all pois
///
/// returns:
/// Array of CTLPOI
- (NSArray<CTLPOI *> * _Nonnull)fetchPOIs SWIFT_WARN_UNUSED_RESULT;
/// Fetch poi by id
/// \param id poi id
///
///
/// returns:
/// CTLPOI (optional)
- (CTLPOI * _Nullable)fetchPOIWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch poi by path id
/// \param pathId path id
///
///
/// returns:
/// CTLPOI (optional)
- (CTLPOI * _Nullable)fetchPOIWithPathId:(NSString * _Nonnull)pathId SWIFT_WARN_UNUSED_RESULT;
/// Fetch all sections
///
/// returns:
/// Array of CTLSection
- (NSArray<CTLSection *> * _Nonnull)fetchSections SWIFT_WARN_UNUSED_RESULT;
/// Fetch section by id
/// \param id section id
///
///
/// returns:
/// CTLSection (optional)
- (CTLSection * _Nullable)fetchSectionWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Map Constants
SWIFT_CLASS("_TtC4Maps12MapConstants")
@interface MapConstants : NSObject
/// Post this notification to hide the POI detail view
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIDE_PREVIEW_NOTIFICATION;)
+ (NSString * _Nonnull)HIDE_PREVIEW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to show the minimalist POI detail view by including the CTLPOI id
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PREVIEW_NOTIFICATION;)
+ (NSString * _Nonnull)SHOW_PREVIEW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to change the maps floor level by including a CTLLevel object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_FLOOR_NOTIFICATION;)
+ (NSString * _Nonnull)CHANGE_FLOOR_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Map setup completed notification
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_ORIGIN_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_ORIGIN_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_DESTINATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_DESTINATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI id in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_FOCUS_POI_BY_ID_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_FOCUS_POI_BY_ID_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to focus on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_UN_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_UN_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to zoom out, focus, and zoom in on a POI by including a CTLPOI object in the notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_ZOOM_FOCUS_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_ZOOM_FOCUS_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to end the navigation and remove the path
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_END_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_END_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to end the navigation and remove the path
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_END_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_END_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Call back when the auto follow button has been tapped
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_ENABLE_AUTO_FOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_ENABLE_AUTO_FOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the selected POI
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_SELECT_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_SELECT_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the deselected POI
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_DESELECT_POI_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_DESELECT_POI_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to know when to start the AR
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_AR_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_AR_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get notified when the navigate button is tapped
/// <ul>
///   <li>
///     Returns CTLPOI id in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_DIRECTION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_DIRECTION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get notified when the navigation started
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_START_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_START_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_DESTINATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_DESTINATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the level updates
///
/// returns:
/// <code>CTLLevel</code> in the notification.object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_LEVEL_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_LEVEL_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_PATH_DATA_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_PATH_DATA_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_PATHS_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_PATHS_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the section updates
/// <ul>
///   <li>
///     Returns CTLSection in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_SECTION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_SECTION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to get the user location updates
/// <ul>
///   <li>
///     Returns CTLLocation in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DID_UPDATE_USER_LOCATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DID_UPDATE_USER_LOCATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Post this notification to start the navigation
/// <ul>
///   <li>
///     Parameters: [ “origin” : <CTLPOI>, “destination” : <CTLPOI> ]
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_WILL_START_NAVIGATION_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_WILL_START_NAVIGATION_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_DISABLE_AUTOFOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_DISABLE_AUTOFOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_ENABLE_AUTOFOLLOW_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_ENABLE_AUTOFOLLOW_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_VENUE_CHANGED_NOTIFICATION;)
+ (NSString * _Nonnull)MAP_VENUE_CHANGED_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Amenities setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AMENITIES_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)AMENITIES_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Levels and Sections setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LEVELS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)LEVELS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// Occupants setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OCCUPANTS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)OCCUPANTS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
/// POIs additional setup completed
/// <ul>
///   <li>
///     If there are errors, error message will be in the notification.object
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull POIS_SETUP_NOTIFICATION;)
+ (NSString * _Nonnull)POIS_SETUP_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MapManagerDelegate;
@class SDKConfig;

/// Handles all the information related to the map
SWIFT_CLASS("_TtC4Maps10MapManager")
@interface MapManager : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MapManager * _Nonnull shared;)
+ (MapManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <MapManagerDelegate> _Nullable delegate;
+ (void)setArButtonVisible:(BOOL)visible;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the map data for the given configuration
/// \param config Configuration
///
- (void)setupWithConfig:(SDKConfig * _Nonnull)config;
@end


/// The <code>MapManagerDelegate</code> protocol defines a set of methods that respond to the setup callbacks.
SWIFT_PROTOCOL("_TtP4Maps18MapManagerDelegate_")
@protocol MapManagerDelegate
/// Successful map setup callback
- (void)didFinishMapSetup;
/// Failed map setup callback
- (void)didFailMapSetupWithError:(NSString * _Nullable)error;
/// Successful amenities setup callback
- (void)didFinishAmenitiesSetup;
/// Failed amenities setup callback
- (void)didFailAmenitiesSetupWithError:(NSString * _Nullable)error;
/// Successful occupants setup callback
- (void)didFinishOccupantsSetup;
/// Failed occupants setup callback
- (void)didFailOccupantsSetupWithError:(NSString * _Nullable)error;
/// Successful paths setup callback
- (void)didFinishPathsSetup;
/// Failed paths setup callback
- (void)didFailPathsSetupWithError:(NSString * _Nullable)error;
/// Successful levels setup callback
- (void)didFinishLevelsSetup;
/// Failed levels setup callback
- (void)didFailLevelsSetupWithError:(NSString * _Nullable)error;
@optional
- (void)didFinishSetupWithError:(NSString * _Nullable)withError;
@end

@protocol MapsDelegate;

/// Parent controller of the whole Map component
SWIFT_CLASS("_TtC4Maps4Maps")
@interface Maps : BaseViewController
@property (nonatomic, weak) id <MapsDelegate> _Nullable delegate;
- (void)viewDidLoad;
///
- (void)viewWillDisappear:(BOOL)animated;
- (void)changeFloorWithLevel:(CTLLevel * _Nonnull)level;
- (void)focusWithPoi:(CTLPOI * _Nonnull)poi;
- (void)focusWithPoiID:(NSString * _Nonnull)poiID;
- (void)unFocusPOI;
- (void)startNavigationWithRequest:(CTLPathRequest * _Nonnull)request;
- (void)startNavigationWithStartPOI:(NSString * _Nonnull)startPOI endPOI:(NSString * _Nonnull)endPOI disablePath:(BOOL)disablePath;
- (void)startNavigationFromCurrentLocationWithDestinationPOI:(NSString * _Nonnull)destinationPOI disablePath:(BOOL)disablePath;
- (void)stopNavigation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>MapsDelegate</code> protocol defines a set of methods that respond to map actions.
SWIFT_PROTOCOL("_TtP4Maps12MapsDelegate_")
@protocol MapsDelegate
@optional
/// Callback triggered when the navigation stopped
- (void)didEndNavigation;
/// Callback after deselecting a POI on the map
- (void)didDeselectPOIWithPoi:(CTLPOI * _Nonnull)poi;
/// Callback after the map has been loaded
- (void)didFinishLoadingMap;
/// Callback after tapping a POI on the map
- (void)didSelectPOIWithPoi:(CTLPOI * _Nonnull)poi;
/// Callback triggered when the navigation started
- (void)didStartNavigationWithPath:(CTLPathRequest * _Nonnull)path;
/// Callback when the floor level changed
- (void)didUpdateLevelWithLevel:(CTLLevel * _Nonnull)level;
/// Callback when the section changed
- (void)didUpdateSectionWithSection:(CTLSection * _Nonnull)section;
/// Callback on touch up of the navigate button
- (void)willStartNavigationWithRequest:(CTLPathRequest * _Nonnull)request;
@end




/// Notification Constants
SWIFT_CLASS("_TtC4Maps21NotificationConstants")
@interface NotificationConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ServerCredential;

SWIFT_CLASS("_TtC4Maps9SDKConfig")
@interface SDKConfig : NSObject
- (nonnull instancetype)initWithBaseHostUrl:(NSString * _Nonnull)baseHostUrl venueCode:(NSString * _Nonnull)venueCode credential:(ServerCredential * _Nonnull)credential OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4Maps16ServerCredential")
@interface ServerCredential : NSObject
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password clientId:(NSString * _Nonnull)clientId clientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIColor;

/// App Settings
SWIFT_CLASS("_TtC4Maps8Settings")
@interface Settings : NSObject
/// “en” for English
/// “zh_cn” for Simplified
/// “zh_tw” for Traditional
///
/// returns:
/// String
+ (NSString * _Nonnull)getLanguageCode SWIFT_WARN_UNUSED_RESULT;
/// Set the app’s main color
/// \param color color
///
+ (void)setAppThemeWithColor:(UIColor * _Nonnull)color;
/// Set the apps contrasting color
/// \param color color
///
+ (void)setAppContrastThemeWithColor:(UIColor * _Nonnull)color;
+ (void)setDefaultCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
/// Sets the font size multiplier
/// \param multiplier multiplier
///
+ (void)setFontSizeMultiplierWithMultiplier:(float)multiplier;
/// Sets the language code
/// “en” for English
/// “zh_cn” for Simplified
/// “zh_tw” for Traditional
/// \param code language code
///
+ (void)setLanguageWithCode:(NSString * _Nonnull)code;
/// Sets the map’s background color
/// \param color UIColor
///
+ (void)setMapBackgroundColorWithColor:(UIColor * _Nonnull)color;
/// POI details background color
/// \param color color
///
+ (void)setPreviewBackgroundColorWithColor:(UIColor * _Nonnull)color;
/// POI details text colors
/// \param color color
///
+ (void)setPreviewTextColorWithColor:(UIColor * _Nonnull)color;
/// Sets the user location indicator’s color
/// \param color UIColor (default value is blue)
///
+ (void)setUserLocationColorWithColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end














SWIFT_CLASS("_TtC4Maps12VenueManager")
@interface VenueManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
